Greeting
Define a function greeting that accepts an optional string argument called name. greeting should return a personalized string if the name is present.

function greeting(name){
  if(name === undefined){
    return "Hello!";
  }
  return `Hello ${name}!`; 
}

Do You Play the Theremin
Define a function doYouPlayTheTheremin that accepts a string as an argument. doYouPlayTheTheremin should return true if the inputted string starts with the letters s or S. Otherwise, doYouPlayTheTheremin should return false.

function doYouPlayTheTheremin(string){
  if (string[0] === 's' || string[0] === 'S'){
    return true;
  }
  return false;
}

Last Character
Define a function lastCharacter that accepts two strings as arguments. lastCharacter should return true if both strings end with the same character. Otherwise, lastCharacter should return false.

function lastCharacter(string1, string2){
  if(string1[string1.length-1] === string2[string2.length-1]){
    return true;
  }
  return false;
}

Max of Three
Write a function maxOfThree that accepts three number arguments. maxOfThree should return largest number of the three.

function maxOfThree(num1,num2,num3){
  max = num1;
  if (num2 > num1){
    max = num2;
  } 
  if (num3 > num2 && num3 > num1){
    max = num3;
  }
  return max;
}

Every Which Way
Write a function everyWhichWay that accepts three number arguments. everyWhichWay should:

return 'sum' if the sum of the first two numbers equals the third
return 'difference' if the first number minus the second equals the third
return 'product' if the product of the first two numbers equals the third
return 'fraction' if the first number divided by the second equals the third
return null if none of the above are true

function everyWhichWay(num1,num2,num3){
  if (num1 + num2 === num3){
    return 'sum';
  }
  if (num1 - num2 === num3){
    return 'difference';
  }
  if (num1 * num2 === num3){
    return 'product';
  }
  if (num1 / num2 === num3){
    return 'fraction';
  } else return null;
}

Odd Couple
Define a function, oddCouple, that accepts an array of numbers as an argument.

oddCouple should return a new array with the first two odd numbers from the original array:

oddCouple([1, 2, 3, 4, 5]); // => [1, 3]
If fewer than two odd numbers exist in the original array, return an empty array or an array with the only odd number:

function oddCouple(array){
  newArray = [];
  for (var i = 0; i < array.length; i++){
    if (array[i] % 2 !== 0 && newArray.length < 2){
      newArray.push(array[i]);
    }
  }
  return newArray;
}

My Includes
Define a function, myIncludes, that accepts an array and a searchValue.

myIncludes should return true if the searchValue is an element in the array. Otherwise, myIncludes should return false.

Do not use the built-in .includes array method during this problem.

function myIncludes(array, searchValue){
  for (var i = 0; i < array.length; i++){
    if (array[i] === searchValue){
      return true;
    } 
  }
  return false;
}

My Last Index Of
Define a function, myLastIndexOf, that accepts up to three arguments: array, searchValue, startIdx (optional)
myLastIndexOf should return the last index at which the searchValue appears in the array.

myLastIndexOf(['gee', 'gee', 'gee', 'gee', 'baby', 'baby'], 'gee'); // => 3
If the searchValue isn't in the array, myLastIndexOf should return -1.

myLastIndexOf(['Tiffany', 'Sunny', 'Yoona'], 'Jessica'); // => -1
If startIdx is defined, myLastIndexOf should start looking for the seachValue at that index, and then move toward the front of the array as it looks for the value.

myLastIndexOf(['the', 'girls', 'bring', 'the', 'boys', 'out'], 'the', 2); // => 0
You cannot use the built-in .lastIndexOf method for this problem

function myLastIndexOf(array, searchValue, startIdx){
  if (startIdx === undefined) {
    startIdx = array.length - 1;
  }
  for (var i = startIdx; i >= 0; i--){
    if (array[i] === searchValue){
      return i;
    }
  }
  return -1;
}

My Reverse
Define a function myReverse that accepts an array.

myReverse should return a new array with the elements in reverse order.

myReverse([1, 2, 3]);    // => [3, 2, 1]
Do not use the built-in .reverse method for this problem

function myReverse(array){
  newArray = [];
  for (var i = array.length-1; i >= 0; i--){
    newArray.push(array[i]);
  }
  return newArray;
}

My Unshift
Write a function myUnshift that takes an array and a value of any type as arguments.

myUnshift should return a new array, with the given value as the first element in the new array.

myUnshift([1, 2, 3], 0); / => [0, 1, 2, 3];
Do not use the built-in .shift method for this problem!

function myUnshift(originalArray, value) {
  let newArray = [value];
  for (let i = 0; i < originalArray.length; i++) {
    newArray.push(originalArray[i]);
  }
  return newArray;
}
